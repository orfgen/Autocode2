
package boofcv.alg.misc;

import boofcv.alg.InputSanityCheck;
import boofcv.struct.image.*;

import javax.annotation.Generated;

/**
 * Computes statistical properties of pixels inside an image.
 * Actually, this is a truncated version to test Autocode2.
 *
 * <p>DO NOT MODIFY: Generated by "%GENERATOR%"</p>.
 *
 * @author Peter Abeles
 */
@Generated("boofcv.alg.misc.?")
public class ImageStatistics {
 
//BEGIN_BLOCK
	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( %IMAGE_TYPE% input ) {
		return min%UNSIGNED_SUFFIX% ( input.data, input.startIndex, input.height, input.width%NUM_BANDS%, input.stride );
	}

//END_BLOCK

	private static int minU( byte[] array , int startIndex , int rows , int columns , int stride ) {

		int output = array[startIndex]& 0xFF;

		for( int y = 0; y < rows; y++ ) {
			int index = startIndex + y*stride;
			int end = index + columns;

			for( ; index < end; index++ ) {
				int v = array[index] & 0xFF;
				if( v < output )
					output = v;
			}
		}
		return output;
	}
	
	private static int min( short[] array , int startIndex , int rows , int columns , int stride ) {

		int output = array[startIndex];

		for( int y = 0; y < rows; y++ ) {
			int index = startIndex + y*stride;
			int end = index + columns;

			for( ; index < end; index++ ) {
				int v = array[index] ;
				if( v < output )
					output = v;
			}
		}
		return output;
	}

}